name: AKS Deployment Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'

env:
  ACR_NAME: kiranacrdevops     # From Terraform output
  AKS_CLUSTER_NAME: dev-aks-cluster # From Terraform output
  RESOURCE_GROUP: spoke1-rg    # From Terraform output
  APP_NAME: aks-demo-app

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.ACR_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
          ${{ env.ACR_NAME }}.azurecr.io/${{ env.APP_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-aks:
    runs-on: ubuntu-latest
    needs: [build-test-push]
    environment: ${{ inputs.environment || 'staging' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get AKS Credentials
      uses: azure/aks-set-context@v3
      with:
        cluster-name: ${{ env.AKS_CLUSTER_NAME }}
        resource-group: ${{ env.RESOURCE_GROUP }}

    - name: Deploy to AKS
      env:
        IMAGE_TAG: ${{ github.sha }}
        DEPLOY_ENV: ${{ inputs.environment || 'staging' }}
      run: |
        # Process templates
        for file in k8s/*.yaml; do
          sed -e "s/{{APP_NAME}}/${{ env.APP_NAME }}/g" \
              -e "s/{{ACR_NAME}}/${{ env.ACR_NAME }}/g" \
              -e "s/{{IMAGE_TAG}}/${{ env.IMAGE_TAG }}/g" \
              -e "s/{{DEPLOY_ENV}}/${{ env.DEPLOY_ENV }}/g" \
              $file | kubectl apply -f -
        done
        
        kubectl rollout status deployment/${{ env.APP_NAME }}
        echo "Application URL: $(kubectl get service ${{ env.APP_NAME }}-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
