name: AKS Deployment Pipeline 

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
      
permissions:
  id-token: write    # Required for OIDC authentication
  contents: read     # Allows reading repository contents

env:
  ACR_NAME: kiranacrdevops
  AKS_CLUSTER_NAME: dev-aks-cluster
  RESOURCE_GROUP: spoke1-rg
  APP_NAME: aks-demo-app

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 'Build and push image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build . -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}

  deploy-to-aks:
    runs-on: ubuntu-latest
    needs: [build-test-push]
    env:
      IMAGE_TAG: ${{ github.sha }}
      DEPLOY_ENV: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS Credentials
        uses: azure/aks-set-context@v3
        with:
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}
          resource-group: ${{ env.RESOURCE_GROUP }}

      - name: Replace placeholders in deployment.yaml files
        run: |
          # Replace placeholders with actual values in all YAML files in the kube-manifest folder
          for file in ./k8s/*.yaml; do
            envsubst < $file > ./k8s/$(basename $file .yaml)-final.yaml
          done

      - name: Deploy to AKS
        run: |
          # Apply all the final YAML files in the kube-manifest folder
          for file in ./k8s/*-final.yaml; do
            kubectl apply -f $file -n ${{ env.DEPLOY_ENV }}
          done
          kubectl rollout status deployment/${{ env.APP_NAME }} -n ${{ env.DEPLOY_ENV }}

      - name: Get Application URL
        run: |
          APP_URL=$(kubectl get service ${{ env.APP_NAME }}-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "Application URL: $APP_URL"
